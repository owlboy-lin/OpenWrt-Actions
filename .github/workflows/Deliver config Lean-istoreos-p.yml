
    #
    # This is free software, lisence use MIT.
    # 
    # Copyright (C) 2019 P3TERX <https://p3terx.com>
    # Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
    # 
    # <https://github.com/KFERMercer/OpenWrt-CI>
    # 

    name: Deliver config Lean-istoreos-P



    on:
      repository_dispatch:
      workflow_dispatch:
        inputs:
          ssh:
            description: 'SSH connection to Actions'
            required: true
            default: 'true'

    permissions:
      contents: read
            
          
    env:
      REPO_URL: https://github.com/coolsnowwolf/lede.git
      REPO_BRANCH: master
      FEEDS_CONF: feeds.conf.default
      CONFIG_FILE: Lean-istoreos-P.info
      Firmware_Name: Lean-istoreos-P
      DIY_P1_SH: smpackage-1.sh
      DIY_P2_SH: smpackage-2.sh
      UPLOAD_WETRANSFER: false
      GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
      TZ: Asia/Shanghai

    jobs:

      # build:
      
        # runs-on: ubuntu-latest
     # #   container: node:16.16.0
     
      merge:
        runs-on: Ubuntu-22.04
        if: github.event.repository.owner.id == github.event.sender.id
     
        name: Build ${{matrix.target}}
        strategy:
          fail-fast: false
          matrix:
            target: [Deliver config Lean-Mosdns(P)]
        
        steps:
        - name: 准备完成
          uses: actions/checkout@v4

        - name: 初始化系统环境
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo -E apt-get -qq update
            sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
            libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
            libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev libfuse-dev
            sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
            sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
            sudo -E apt-get -qq autoremove --purge
            sudo -E apt-get -qq clean
            sudo timedatectl set-timezone "$TZ"
            sudo mkdir -p /workdir
            sudo chown $USER:$GROUPS /workdir
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
            
        - name: 更新时区、编译时间
          id: date
          run: |
            sudo timedatectl set-timezone "$TZ"
            echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
            echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
            echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
            echo "编译开始时间..."
            START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
            echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
            
            
        - name: 下载源代码
          working-directory: /workdir
          run: |
            git clone $REPO_URL -b $REPO_BRANCH openwrt
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            
        - name: Free up disk space
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
            ln -sf /mnt/openwrt/dl openwrt/dl
            ln -sf /mnt/openwrt/bin openwrt/bin
            ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir

            
        - name: patch1补丁和自定义设置
          run: |
            [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
            chmod +x $DIY_P1_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P1_SH
            
        - name: 更新源 #Update feeds
          run: cd openwrt && ./scripts/feeds update -a

        - name: 安装源 #Install feeds
          run: cd openwrt && ./scripts/feeds install -a

        - name: patch2补丁和自定义设置
          run: |
            [ -e files ] && mv files openwrt/files
            [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
            chmod +x $DIY_P2_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH

            
        - name: Generate configuration file
          run: |
            cd openwrt
            make defconfig
            find dl -size -1024c -exec rm -f {} \;
     
        - name: Cache
          uses: stupidloud/cachewrtbuild@main
          with:
            ccache: 'true'
            mixkey: ${{ matrix.target }}
            clean: ${{ contains(github.event.action, 'nocache') }}
            prefix: ${{ github.workspace }}/openwrt


        - name: Check space usage
          run: |
            shopt -s extglob
            cd openwrt
            if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
                rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
            fi
            df -hT  
     
        - name: SSH connection to Actions
          uses: P3TERX/ssh2actions@v1.0.0
          if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          env:
            TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }} 

        # - name: 输出编译信息
          # run: |
            # cd openwrt
            # echo " 系统空间      类型   总数  已用  可用 使用率"
            # df -hT $PWD
            
            # echo
            # echo "=========================================="
            # echo

            # ZZZ="package/lean/default-settings/files/zzz-default-settings"
            # echo "DISTRIB_REVISION=$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')" >> $GITHUB_ENV
            # echo "KERNEL_PATCHVER=$(cat target/linux/rockchip/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
            # echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
            # echo "	    内核版本：$(cat target/linux/rockchip/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"

            # echo
            # echo "=========================================="

            # grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
            # grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
            # sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
            # sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
            # sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1 #排除 luci-app-passwall_Transparent_Proxy
            # sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1 #排除 luci-app-qbittorrent-simple_dynamic
            # sed -i 's/=y/\ /g' Plug-in
            # awk '$0=NR$0' Plug-in > Plug-2
            # awk '{print "	" $0}' Plug-2 > Plug-in

            # echo
            # echo
            # echo "	      已选插件列表"
            # cat Plug-in
            # rm -rf {Plug-in,Plug-2}

            # echo
            # echo "=========================================="

            # echo
            # echo
            # echo "输出完整插件信息..."
            # echo
            # echo
            # cat .config

      
        - name: Prepare artifact
          run: |
            cd openwrt
            mkdir -p ./artifact/buildinfo
            cp -rf .config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
      
         
        - name: Upload config
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.Firmware_Name }}_${{ env.FILE_DATE }}
            path: openwrt/artifact/buildinfo/
         
    #    - name: SSH connection to Actions
    #      uses: P3TERX/ssh2actions@v1.0.0
    #      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
    #      env:
    #        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    #        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}     
            
        - name: Organize files
          id: organize
          run: |
            cd openwrt/artifact/buildinfo/
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #        echo "::set-output name=status::success"
    #        echo "status=success" >> $GITHUB_OUTPUT

        - name: Upload firmware to WeTransfer
          id: wetransfer
          if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
          run: |
            curl -sL https://git.io/file-transfer | sh 
            ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
            echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    #        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
    #        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT 
     
    #    - name: Delete workflow runs
    #      uses: GitRML/delete-workflow-runs@main
    #      with:
    #        retain_days: 1
    #        keep_minimum_runs: 1

    #    - name: Remove old Releases
    #      uses: dev-drprasad/delete-older-releases@v0.1.0
    #      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #      with:
    #        keep_latest: 3
    #        delete_tags: true
    #      env:
    #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


        # - name: 删除运行记录
          # uses: Mattraks/delete-workflow-runs@v2
          # with:
            # retain_days: 3     #保留最后多少记录不删除
            # keep_minimum_runs: 3

        # - name: 删除自动发布的旧固件
          # uses: dev-drprasad/delete-older-releases@v0.2.1
          # if: env.UPLOAD_RELEASE == 'true' && !cancelled()
          # with:
            # keep_latest: 20        #保留多少个releases不删除
          # env:
            # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}