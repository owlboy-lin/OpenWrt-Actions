# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#

name: Banana-Pi-BPI-R4-CI

on:
  schedule:
    - cron: 0 22 * * *

  release:
    types: [published]

  watch:
    types: [started]

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
            
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'true'
        type: boolean


    
env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x
  REPO_BRANCH: mt7988
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/Banana-Pi-BPI-R4.info
  DIY_P1_SH: 
  DIY_P2_SH: 
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai  

jobs:

  build_openwrt:


    name: Build Banana-Pi-BPI-R4 firmware

    runs-on: Ubuntu-22.04
    
    steps:
      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # docker rmi `docker images -q`
          # sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          # sudo -E apt-mark hold grub-efi-amd64-signed
          # sudo -E apt update
          # sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          # sudo -E apt -y full-upgrade
          # sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          # sudo -E apt -y install rename
          # sudo -E systemctl daemon-reload
          # sudo -E apt -y autoremove --purge
          # sudo -E apt clean
          # sudo -E timedatectl set-timezone "Asia/Shanghai"
          # sudo mkdir -p /workdir
          # sudo chown $USER:$GROUPS /workdir  
          
          sudo -E apt-get -qq update
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          sudo -E apt -y install rename
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE /workdir

      - name: 更新时区、编译时间
        id: date
        run: |
          sudo timedatectl set-timezone "$TZ"
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
          echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
          echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "编译开始时间..."
          START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
          echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

      - name: 准备完成
        uses: actions/checkout@v4

      - name: 下载源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt


        
      # - name: SSH connection to Actions
        # uses: P3TERX/ssh2actions@v1.0.0
        # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        # env:
          # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: 缓存
        uses: klever1988/cachewrtbuild@main
        if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
        with:
          ccache: 'true'
          mixkey: '${{ env.Firmware_Name }}'
          prefix: ${{ github.workspace }}/openwrt


      - name: 更新源
        run: |
          cd openwrt
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }} 

      - name: Generate configuration file
        run: |
          cd openwrt
          make defconfig

      - name: 下载固件包
        id: package
        if: (!cancelled())
        run: |
          cd openwrt
          make defconfig
          make download -j$(($(nproc)+1))
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \; 
  
      # - name: SSH connection to Actions
      #   uses: P3TERX/ssh2actions@v1.0.0
      #   if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      #   env:
      #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}   

      - name: 编译固件
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV



      - name: 整理固件文件
        id: artifact
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cp -rf ./.config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
          cp -rf ./.config ./artifact/firmware/${{ env.Firmware_Name }}.info
          cp -rf ./feeds.conf.default ./artifact/buildinfo/
          cd artifact/firmware/
          rename "s/openwrt/${{ env.Firmware_Name }}/" *

         
      - name: 上传固件
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/firmware/

      - name: 上传配置文件
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BUILDINFO == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_buildinfo${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/buildinfo/

      - name: 上传插件
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_package${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/package/
  

#      - name: Upload release asset
#        if: github.event == 'release'
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.YOURTOKEN }}
#          file: openwrt/artifact/firmware/*
#          tag: ${{ github.ref }}
#          file_glob: true
