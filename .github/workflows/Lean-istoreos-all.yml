    #
    # Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
    #
    # This is free software, licensed under the MIT License.
    # See /LICENSE for more information.
    #
    # https://github.com/P3TERX/Actions-OpenWrt
    # Description: Build OpenWrt using GitHub Actions
    #

    name: Lean-istoreos-all

    on:
     # schedule:
       # - cron: 0 20 * * *

      # release:
        # types: [published]
     
      # watch:
        # types: [started]

      repository_dispatch:
      workflow_dispatch:
        inputs:
          ssh:
            description: 'SSH connection to Actions'
            required: false
            default: 'false'

    permissions:
      contents: read


    env:
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      FEEDS_CONF: feeds.conf.default
      CONFIG_FILE: Lean-istoreos-all.info
      Firmware_Name: Lean-istoreos-all
      DIY_P1_SH: smpackage-1.sh
      DIY_P2_SH: smpackage-2.sh
      UPLOAD_BIN_DIR: false
      UPLOAD_organize: false
      UPLOAD_FIRMWARE: true
      UPLOAD_COWTRANSFER: false
      UPLOAD_WETRANSFER: false
      UPLOAD_RELEASE: false
      TZ: Asia/Shanghai

    jobs:
      build_openwrt:
      
        name: Lean-istoreos-all
      
        runs-on: ubuntu-latest
    #    container: node:16.16.0
    #    timeout-minutes: 360
      

        steps:
        - name: 准备完成
          uses: actions/checkout@v4

        - name: 初始化系统环境
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
            sudo -E apt-get -qq update
            sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-latest)
            sudo -E apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
            libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
            mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
            libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
            vim wget xmlto xxd zlib1g-dev python3-setuptools
            sudo -E apt-get -qq autoremove --purge
            sudo -E apt-get -qq clean
            sudo timedatectl set-timezone "$TZ"
            sudo mkdir -p /workdir
            sudo chown $USER:$GROUPS /workdir

        - name: 更新时区、编译时间
          id: date
          run: |
            sudo timedatectl set-timezone "$TZ"
            echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
            echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
            echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
            echo "编译开始时间..."
            START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
            echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
            
        - name: 下载源代码
          working-directory: /workdir
          run: |
            # df -hT $PWD
            git clone $REPO_URL -b $REPO_BRANCH openwrt
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            
        - name: Free up disk space
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
            ln -sf /mnt/openwrt/dl openwrt/dl
            ln -sf /mnt/openwrt/bin openwrt/bin
            ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
            
        # - name: Cache
          # uses: klever1988/cachewrtbuild@main
          # with:
            # ccache: 'true'
            # prefix: ${{ github.workspace }}/openwrt
            
        - name: patch1补丁和自定义设置
          run: |
            [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
            chmod +x $DIY_P1_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P1_SH
     
        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
     
        - name: 更新源 #Update feeds
          run: cd openwrt && ./scripts/feeds update -a

        - name: 安装源 #Install feeds
          run: cd openwrt && ./scripts/feeds install -a


        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}


        - name: patch2补丁和自定义设置
          run: |
            [ -e files ] && mv files openwrt/files
            [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
            chmod +x $DIY_P2_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH

        # - name: 输出编译信息
          # run: |
            # cd openwrt
            # echo " 系统空间      类型   总数  已用  可用 使用率"
            # df -hT $PWD
            
            # echo
            # echo "=========================================="
            # echo

            # ZZZ="package/lean/default-settings/files/zzz-default-settings"
            # echo "DISTRIB_REVISION=$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')" >> $GITHUB_ENV
            # echo "KERNEL_PATCHVER=$(cat target/linux/rockchip/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
            # echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
            # echo "	    内核版本：$(cat target/linux/rockchip/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"

            # echo
            # echo "=========================================="

            # grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
            # grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
            # sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
            # sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
            # sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1 #排除 luci-app-passwall_Transparent_Proxy
            # sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1 #排除 luci-app-qbittorrent-simple_dynamic
            # sed -i 's/=y/\ /g' Plug-in
            # awk '$0=NR$0' Plug-in > Plug-2
            # awk '{print "	" $0}' Plug-2 > Plug-in

            # echo
            # echo
            # echo "	      已选插件列表"
            # cat Plug-in
            # rm -rf {Plug-in,Plug-2}

            # echo
            # echo "=========================================="

            # echo
            # echo
            # echo "输出完整插件信息..."
            # echo
            # echo
            # cat .config

        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            
        - name: 下载固件包
          id: package
          run: |
            cd openwrt
            make defconfig
            make download -j8
            find dl -size -1024c -exec rm -f {} \;
            
        - name: Cache
          uses: stupidloud/cachewrtbuild@main
          with:
            ccache: 'true'
            mixkey: ${{ matrix.target }}
            clean: ${{ contains(github.event.action, 'nocache') }}
            prefix: ${{ github.workspace }}/openwrt


        - name: Check space usage
          run: |
            shopt -s extglob
            cd openwrt
            if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
                rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
            fi
            df -hT        

     
            
        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

        - name: 开始编译固件
          id: compile
          run: |
            # cd openwrt
            # make -j$(nproc) || make -j1 V=s        
            cd openwrt
            echo -e "$(nproc) thread compile"
            make -j$(nproc) || make -j1 || make -j1 V=s
            echo "{status}={success}" >> $GITHUB_OUTPUT
            # grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
            [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
              
       
        - name: 检查空间使用情况
          if: (!cancelled())
          run: |
            echo "======================="
            echo "Space usage:"
            echo "======================="
            df -hT
            echo "======================="
            du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
            du -h --max-depth=1 openwrt/build_dir
            du -h --max-depth=1 openwrt/bin

        - name: 整理固件文件
          if: (!cancelled())
          run: |
            cd openwrt 
            mkdir -p ./artifact/firmware
            mkdir -p ./artifact/package
            mkdir -p ./artifact/buildinfo
            rm -rf $(find ./bin/targets/ -type d -name "packages")
            cp -rf .config ./artifact/buildinfo/config.info
            cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
            cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
            cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
              
        - name: SSH connection to Actions
          uses: P3TERX/ssh2actions@v1.0.0
          if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          env:
            TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        - name: 只上传固件目录的BIN文件
          uses: actions/upload-artifact@v4
          if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
          with:
            name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
            path: openwrt/bin

        - name: 只上传固件目录的插件
          id: organize
          if: steps.compile.outputs.status == 'success' && env.UPLOAD_organize == 'true'
          run: |
            cd openwrt/bin/targets/*/*
            rm -rf packages
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
            
        - name: 上传固件目录
          uses: actions/upload-artifact@v4
          if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
          with:
            name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
            path: openwrt/artifact/firmware/

        - name: Deliver buildinfo
          uses: actions/upload-artifact@v4
          if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success'
          with:
            name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_buildinfo${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
            path: openwrt/artifact/buildinfo/

        - name: Deliver package
          uses: actions/upload-artifact@v4
          if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success'
          with:
            name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_package${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
            path: openwrt/artifact/package/

        - name: Upload firmware to cowtransfer
          id: cowtransfer
          if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
          run: |
            curl -fsSL git.io/file-transfer | sh
            ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
            echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
            echo "{url}={$(cat cowtransfer.log | grep https | cut -f3 -d" ")}" >> $GITHUB_OUTPUT

        - name: Upload firmware to WeTransfer
          id: wetransfer
          if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
          run: |
            curl -fsSL git.io/file-transfer | sh
            ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
            echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
            echo "{url}={$(cat wetransfer.log | grep https | cut -f3 -d" ")}" >> $GITHUB_OUTPUT

        - name: Generate release tag
          id: tag
          if: env.UPLOAD_RELEASE == 'true' && !cancelled()
          run: |
            echo "{release_tag}={$(date +"%Y.%m.%d-%H%M")}" >> $GITHUB_OUTPUT
            touch release.txt
            [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
            [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
            echo "{status}={success}" >> $GITHUB_OUTPUT

        - name: Upload firmware to release
          uses: softprops/action-gh-release@v1
          if: steps.tag.outputs.status == 'success' && !cancelled()
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.tag.outputs.release_tag }}
            body_path: release.txt
            files: ${{ env.FIRMWARE }}/*

        # - name: Delete workflow runs
          # uses: Mattraks/delete-workflow-runs@v2
          # with:
            # retain_days: 30
            # keep_minimum_runs: 6

        # - name: Remove old Releases
          # uses: dev-drprasad/delete-older-releases@v0.3.2
          # if: env.UPLOAD_RELEASE == 'true' && !cancelled()
          # with:
            # keep_latest: 3
            # delete_tags: true
          # env:
            # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: 删除运行记录
          uses: Mattraks/delete-workflow-runs@v2
          with:
            retain_days: 10     #保留最后多少记录不删除
            keep_minimum_runs: 3

        - name: 删除自动发布的旧固件
          uses: dev-drprasad/delete-older-releases@v0.3.2
          if: env.UPLOAD_RELEASE == 'true' && !cancelled()
          with:
            keep_latest: 30        #保留多少个releases不删除
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}