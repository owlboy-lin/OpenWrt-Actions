# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
# chmod +x /etc/init.d/netspeedtest

name: Deliver config Banana Pi BPI R4

on:
  schedule:
    - cron: 0 23 * * *

  release:
    types: [published]

  watch:
    types: [started]

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'true'
        type: boolean


    
env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git
  REPO_BRANCH: mt7988
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 
  Firmware_Name: Banana-Pi-BPI-R4
  DIY_P1_SH: 
  DIY_P2_SH: 
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai 

jobs:

  build_openwrt:


    name: Deliver config Banana Pi BPI R4

    runs-on: Ubuntu-22.04
    
    steps:
    
      - name: CPU检测
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 释放磁盘空间
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
          testing: false
       
      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set +e
          docker rmi `docker images -q`
          echo "Deleting files, please wait ..."
          sudo rm -rf \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /etc/mysql \
            /etc/php
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \
            libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev \
            libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
            python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig \
            texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE /workdir

          # sudo -E apt-get -qq update
          # sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          # sudo -E apt -y install rename
          # sudo -E apt-get -qq autoremove --purge
          # sudo -E apt-get -qq clean
          # sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          # /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
          # sudo timedatectl set-timezone "$TZ"
          # sudo mkdir -p /workdir
          # sudo chown $USER:$GROUPS $GITHUB_WORKSPACE /workdir

      - name: 更新时区、编译时间
        id: date
        run: |
          sudo timedatectl set-timezone "$TZ"
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
          echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
          echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "编译开始时间..."
          START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
          echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

      - name: 准备完成
        uses: actions/checkout@v4
            
      - name: 下载源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth=1 -b $REPO_BRANCH --single-branch $REPO_URL openwrt          
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 缓存
        uses: klever1988/cachewrtbuild@main
        if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
        with:
          ccache: 'true'
          mixkey: '${{ env.Firmware_Name }}'
          prefix: ${{ github.workspace }}/openwrt


      - name: 更新源 #Update feeds
        run: cd openwrt && ./scripts/feeds update -a
          
      - name: 安装源 #Install feeds
        run: |
          cd openwrt 
          ./scripts/feeds install -a 
           
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}   



      - name: Generate configuration file
        run: |
          cd openwrt
          make defconfig
    
    
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@main
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    
      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/buildinfo
          cp -rf .config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
    
        
      - name: Upload config
        uses: actions/upload-artifact@v4
        with:
        name: ${{ env.Firmware_Name }}_${{ env.FILE_DATE }}
        path: openwrt/artifact/buildinfo/
        
#    - name: SSH connection to Actions
#      uses: P3TERX/ssh2actions@v1.0.0
#      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
#      env:
#        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
#        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}     
        
      - name: Organize files
        id: organize
        run: |
          cd openwrt/artifact/buildinfo/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
#        echo "::set-output name=status::success"
#        echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -sL https://git.io/file-transfer | sh 
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
#        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
#        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT 
    
      - name: 删除运行记录
        uses: Mattraks/delete-workflow-runs@v2
        with:
        retain_days: 3     #保留最后多少记录不删除
        keep_minimum_runs: 0

#    - name: Remove old Releases
#      uses: dev-drprasad/delete-older-releases@v0.1.0
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      with:
#        keep_latest: 3
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}