
    #
    # This is free software, lisence use MIT.
    # 
    # Copyright (C) 2019 P3TERX <https://p3terx.com>
    # Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
    # 
    # <https://github.com/KFERMercer/OpenWrt-CI>
    # 

    name: Deliver config OpenWrt-FastRhino-r66s



    on:
      repository_dispatch:
      workflow_dispatch:
        inputs:
          ssh:
            description: 'SSH connection to Actions'
            required: true
            default: 'true'

            
          
    env:
      REPO_URL: https://github.com/coolsnowwolf/lede.git
      REPO_BRANCH: master
      CONFIG_PATH: r66s/6.1/config
      FEEDS_CONF: feeds.conf.default
      CONFIG_Name: r66s.config
      CONFIG_FILE: r66s/6.1/config/r66s.config
      DIY_P1_SH: r66s/6.1/diy-part1.sh
      DIY_P2_SH: r66s/6.1/diy-part2.sh
      TZ: Asia/Shanghai

    jobs:

      build:
      
        runs-on: ubuntu-latest

        steps:
        - name: 释放Ubuntu磁盘空间
          uses: jlumbroso/free-disk-space@main
          with:
            # this might remove tools that are actually needed,
            # if set to "true" but frees about 6 GB
            tool-cache: true
            # all of these default to true, but feel free to set to
            # "false" if necessary for your workflow
            android: true
            dotnet: true
            haskell: true
            large-packages: true
            swap-storage: true 
        
        - name: CPU检测
          run: |
            echo "警告⚠"
            echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
            echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
            echo "--------------------------CPU信息--------------------------"
            echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
            echo "CPU核心数量: $(nproc)"
            echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
            echo "--------------------------内存信息--------------------------"
            echo "已安装内存详细信息:"
            echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
            echo "--------------------------硬盘信息--------------------------"
            echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

        - name: 准备完成
          uses: actions/checkout@v4

        - name: 初始化系统环境
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
            sudo -E apt-get -qq update
            sudo -E apt-get -qq install $(curl -fsSL https://github.com/popeyema/OpenWrt-R66s/raw/main/depends-ubuntu-latest)
            sudo apt install clang
            sudo -E apt-get -qq autoremove --purge
            sudo -E apt-get -qq clean
            sudo timedatectl set-timezone "$TZ"
            sudo mkdir -p /workdir
            sudo chown $USER:$GROUPS /workdir

            
        - name: 更新时区、编译时间
          id: date
          run: |
            sudo timedatectl set-timezone "$TZ"
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
            echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
            echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
            echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
            echo "编译开始时间..."
            START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
            echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
            
        - name: 下载源代码
          working-directory: /workdir
          run: |
            df -hT $PWD
            git clone $REPO_URL -b $REPO_BRANCH openwrt
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            
        - name: Free up disk space
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
            ln -sf /mnt/openwrt/dl openwrt/dl
            ln -sf /mnt/openwrt/bin openwrt/bin
            ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir

        # - name: SSH connection to Actions
        #   uses: P3TERX/ssh2actions@main
        #   if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        #   env:
        #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            
            
        - name: patch1补丁和自定义设置
          run: |
            [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
            chmod +x $DIY_P1_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P1_SH

        - name: 更新源 #Update feeds
          run: |
            cd openwrt 
            ./scripts/feeds update -a 
            rm -rf feeds/luci/applications/luci-app-mosdns
            rm -rf feeds/packages/net/{alist,adguardhome,xray*,v2ray*,v2ray*,sing*,smartdns}
            rm -rf feeds/packages/lang/golang
            git clone https://github.com/kenzok8/golang feeds/packages/lang/golang

        - name: 安装源 #Install feeds
          run: cd openwrt && ./scripts/feeds install -a

        - name: patch2补丁和自定义设置
          run: |
            [ -e files ] && mv files openwrt/files
            [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
            chmod +x $DIY_P2_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH
            
        - name: 下载软件包
          id: package
          run: |
            cd openwrt
            make defconfig
            make download -j8
            find dl -size -1024c -exec ls -l {} \;
            find dl -size -1024c -exec rm -f {} \;
     
     
        - name: SSH connection to Actions
          uses: P3TERX/ssh2actions@main
          if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          env:
            TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      
        - name: Prepare artifact
          run: |
            cd openwrt
            mkdir -p ./artifact/buildinfo
            cp -rf .config ./artifact/buildinfo/${{ env.CONFIG_Name }}
            grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
            [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
            cp -rf ./.config ./artifact/buildinfo/${{ env.CONFIG_Name }}.info
            cp -rf ./feeds.conf.default ./artifact/buildinfo/
      
         
        - name: Upload config
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.CONFIG_Name }}_${{ env.FILE_DATE }}
            path: openwrt/artifact/buildinfo/
         
    #    - name: SSH connection to Actions
    #      uses: P3TERX/ssh2actions@v1.0.0
    #      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
    #      env:
    #        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    #        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}     
            
        - name: Organize files
          id: organize
          run: |
            cd openwrt/artifact/buildinfo/
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
            echo "{status}={success}" >> $GITHUB_OUTPUT


     
        - name: 删除运行记录
          uses: Mattraks/delete-workflow-runs@v2
          with:
            retain_days: 3     #保留最后多少记录不删除
            keep_minimum_runs: 0

    #    - name: Remove old Releases
    #      uses: dev-drprasad/delete-older-releases@v0.1.0
    #      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #      with:
    #        keep_latest: 3
    #        delete_tags: true
    #      env:
    #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}