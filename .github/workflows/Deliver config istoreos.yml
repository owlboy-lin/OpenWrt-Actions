
    #
    # This is free software, lisence use MIT.
    # 
    # Copyright (C) 2019 P3TERX <https://p3terx.com>
    # Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
    # 
    # <https://github.com/KFERMercer/OpenWrt-CI>
    # 

    name: Deliver config istoreos



    on:
      repository_dispatch:
      workflow_dispatch:
        inputs:
          ssh:
            description: 'SSH connection to Actions'
            required: true
            default: 'true'

    # permissions:
    #   contents: read
            
          
    env:
      REPO_URL: https://github.com/istoreos/istoreos.git
      REPO_BRANCH: istoreos-22.03
      FEEDS_CONF: feeds.conf
      CONFIG_FILE: istoreos.info
      Firmware_Name: istoreos
      DIY_P1_SH: istoreos/istoreos-1.sh
      DIY_P2_SH: istoreos/istoreos-2.sh
      GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
      TZ: Asia/Shanghai

    jobs:

      merge:
        runs-on: ubuntu-latest
        if: github.event.repository.owner.id == github.event.sender.id
     
        name: Build ${{matrix.target}}
        strategy:
          fail-fast: false
          matrix:
            target: [Deliver config istoreos]
        
        steps:
        - name: 准备完成
          uses: actions/checkout@v4

        - name: 初始化系统环境
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            sudo -E apt-get -qq update
            sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
            libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
            libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev libfuse-dev
            sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
            sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
            sudo -E apt-get -qq autoremove --purge
            sudo -E apt-get -qq clean
            sudo timedatectl set-timezone "$TZ"
            sudo mkdir -p /workdir
            sudo chown $USER:$GROUPS /workdir
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
            
        - name: 更新时区、编译时间
          id: date
          run: |
            sudo timedatectl set-timezone "$TZ"
            echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
            echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
            echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
            echo "编译开始时间..."
            START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
            echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
            
        - name: Clone source code
          working-directory: /workdir
          run: |
            df -hT $PWD
            git clone $REPO_URL -b $REPO_BRANCH openwrt
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            
        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            
            
        - name: patch1补丁和自定义设置
          run: |
            [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/$FEEDS_CONF
            chmod +x $DIY_P1_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P1_SH
     
        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
     
        - name: 更新源 #Update feeds
          run: cd openwrt && ./scripts/feeds update -a
          


          
          
        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@main
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}






        - name: 安装源 #Install feeds
          run: cd openwrt && ./scripts/feeds install -a


        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}


        - name: patch2补丁和自定义设置
          run: |
            [ -e files ] && mv files openwrt/files
            [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
            chmod +x $DIY_P2_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH


        # - name: SSH connection to Actions
          # uses: P3TERX/ssh2actions@v1.0.0
          # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          # env:
            # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            
        - name: 下载固件包
          id: package
          run: |
            cd openwrt
            make defconfig
            make download -j8
            find dl -size -1024c -exec ls -l {} \;
            find dl -size -1024c -exec rm -f {} \;


        - name: Check space usage
          run: |
            shopt -s extglob
            cd openwrt
            if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
                rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
            fi
            df -hT  
     
     
        - name: SSH connection to Actions
          uses: P3TERX/ssh2actions@main
          if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          env:
            TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      
        - name: Prepare artifact
          run: |
            cd openwrt
            mkdir -p ./artifact/buildinfo
            cp -rf .config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
      
         
        - name: Upload config
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.Firmware_Name }}_${{ env.FILE_DATE }}
            path: openwrt/artifact/buildinfo/
         
    #    - name: SSH connection to Actions
    #      uses: P3TERX/ssh2actions@v1.0.0
    #      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
    #      env:
    #        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    #        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}     
            
        - name: Organize files
          id: organize
          run: |
            cd openwrt/artifact/buildinfo/
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
            echo "{ status } = { success } " >> $GITHUB_OUTPUT
     
        - name: 删除运行记录
          uses: Mattraks/delete-workflow-runs@v2
          with:
            retain_days: 3     #保留最后多少记录不删除
            keep_minimum_runs: 0

    #    - name: Remove old Releases
    #      uses: dev-drprasad/delete-older-releases@v0.1.0
    #      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #      with:
    #        keep_latest: 3
    #        delete_tags: true
    #      env:
    #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}