
#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 

name: TEST

on:
#   schedule:
#     - cron: 0 20 * * *
      
  push:
    branches: 
      - master
    paths:
      - '.github/workflows/test.yml'
      - 'LeanR9-x64-simple'

  watch:
    types: [started]

      
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FIRMWARE_NAME: Lean-x64-simple
  CONFIG_FILE: Lean-x64-simple
  DIY_SH: diy.sh
  TARGET: x86
  SUBTARGET: 64
  SSH_ACTIONS: false
  Gzip_file: true
  UPLOAD_BIN_DIR: false
  UPLOAD_ZIP: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:

  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
        - name: Checkout
          uses: actions/checkout@master
          #with:
            #ref: master
            #fetch-depth: 1000000
          
        - name: Set Date
          run: |
           date=$(TZ=UTC-8 date +"%Y.%m.%d-%H%M")
           echo "name=DATE" >> $date
           
        - name: Space cleanup
          env:
            DEBIAN_FRONTEND: noninteractive
          run: |
            docker rmi `docker images -q`
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
            sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
            sudo -E apt-get update
            sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
            sudo -E apt-get -y autoremove --purge
            sudo -E apt-get clean
            
            # 利用挂载在 /mnt/ 的 14G 额外空间:
            # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
            # ln -s /mnt/openwrt/bin ./bin
            # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
            # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
            # ln -s /mnt/openwrt/dl ./dl
            # ln -s /mnt/openwrt/feeds ./feeds
            # ln -s /mnt/openwrt/staging_dir ./staging_dir
            df -h
            
        - name: Clone source code
          run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        
        - name: Update feeds
          run: cd openwrt && ./scripts/feeds update -a

        - name: Install feeds
          run: cd openwrt && ./scripts/feeds install -a

        - name: Generate configuration file
          run:  |
            cd openwrt
            make defconfig
        - name: Make download
          run: |
            cd openwrt
            make download -j8
            find dl -size -1024c -exec ls -l {} \;
            find dl -size -1024c -exec rm -f {} \;
            
        - name: Compile firmware
          run: |
            cd openwrt
            make -j$(nproc) || make -j1 V=s
            echo "======================="
            echo "Space usage:"
            echo "======================="
            df -h
            echo "======================="
            du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
            du -h --max-depth=1 ./build_dir
            du -h --max-depth=1 ./bin
            
        - name: Prepare artifact
          run: |
            mkdir -p ./artifact/firmware
            mkdir -p ./artifact/package
            mkdir -p ./artifact/buildinfo
            rm -rf $(find ./bin/targets/ -type d -name "packages")
            cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
            cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
            cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
         
        - name: Rename file
          id: rename
          run: |
            cd openwrt/bin/targets
            release_tag="${FIRMWARE_NAME}-${DATE}"
            for i in openwrt*; do mv -f $i `echo $i | sed "s/^openwrt-$TARGET-$SUBTARGET/${release_tag}/"`; done
            release_name="${DATE}-${FIRMWARE_NAME}-${SUBTARGET}"
            echo "name=FIRMWARE" >> $PWD
            echo "::set-output name=status::success"
            echo "##[set-output name=release_tag;]$release_tag"
            echo "##[set-output name=RELEASE_NAME;]$release_name"
          
        - name: Upload artifact
          uses: actions/upload-artifact@master
          with:
            name: OpenWrt_firmware
            path: ${{ env.FIRMWARE }}
          
        - name: Upload zip
          id: upload_zip
          run: |
            cd openwrt
            rm -rf ./release/
            mkdir -p ./release/
            zip -r -j release/${{ env.RELEASE_NAME }}.zip bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/* || true
            cd release
            echo "::set-env name=RELEASE::$PWD"
            echo "::set-output name=status::success" 
          
        - name: Upload firmware to release
          uses: softprops/action-gh-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.all_TOKEN }}
          with:
            tag_name: ${{ env.RELEASE_NAME }}
            name: ${{ env.DATE }}
            files: ${{ env.FIRMWARE }}/*

        - name: Remove old Releases
          uses: dev-drprasad/delete-older-releases@v0.1.0
          if: env.UPLOAD_RELEASE == 'true' && !cancelled()
          with:
            keep_latest: 3
            delete_tags: true
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}