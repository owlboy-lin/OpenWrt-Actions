#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 

name: ASUS_RT-Acrh17

on:
  schedule:
    - cron: 0 20 * * *
      
  push:
    branches: 
      - master
    paths:
      - '.github/workflows/ASUS_RT-Acrh17.yml'
#      - 'LeanR9-x64-simple'

  watch:
    types: [started]

      
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FIRMWARE_NAME: ASUS_RT-Acrh17
  TARGET: ipq40xx
  SUBTARGET: generic
  CONFIG_FILE: Lean-x64-simple
  DIY_SH: diy.sh
  UPLOAD_ALL: false
  SSH_ACTIONS: false
  extract:  false
  rename: true
  Gzip_file: false
  UPLOAD_ZIP: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:

  build:

    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master
          
      - name: Set Date
        run: |
           date=$(TZ=UTC-8 date +"%Y.%m.%d-%H%M%S")
           echo "::set-env name=DATE::$date"
           
      - name: new name
        run : |
           firmware_name="${FIRMWARE_NAME}-${DATE}"
           release_name="${DATE}-${FIRMWARE_NAME}"
           echo "::set-env name=NEW_NAME::$firmware_name"
           echo "::set-env name=RELEASE_NAME::$release_name"
           
           
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # 利用挂载在 /mnt/ 的 14G 额外空间:
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Clone source code
        run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        
      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          cd openwrt
          rm -f ./.config*
          touch ./.config

          #
          # ========================固件定制部分========================
          # 

          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 

          # 以下为定制化固件选项和说明:
          #

          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #

          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 

          # 编译x64固件:
          # cat >> .config <<EOF
          # CONFIG_TARGET_x86=y
          # CONFIG_TARGET_x86_64=y
          # CONFIG_TARGET_x86_64_Generic=y
          # EOF

          # 编译ASUS_RT-Acrh17的固件:
          cat >> .config <<EOF
          CONFIG_TARGET_ipq40xx=y
          CONFIG_TARGET_ipq40xx_DEVICE_asus_rt-acrh17=y
          CONFIG_TARGET_BOARD="ipq40xx"
          EOF

          # 编译K3的固件:
          # cat >> .config <<EOF
          # CONFIG_TARGET_bcm53xx=y
          # CONFIG_TARGET_bcm53xx_DEVICE_phicomm-k3=y
          # CONFIG_TARGET_BOARD="bcm53xx"
          # EOF
          
          # 固件压缩:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF

          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF

          # Image Options:
          # cat >> .config <<EOF
          # CONFIG_TARGET_KERNEL_PARTSIZE=32
          # CONFIG_TARGET_ROOTFS_PARTSIZE=2048
          # CONFIG_TARGET_ROOTFS_PARTNAME=""
          # EOF
          
          # IPv6支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF

          # 多文件系统支持:
          cat >> .config <<EOF
          #
          # Filesystems
          #
          CONFIG_PACKAGE_kmod-fs-exfat=y
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-vfat=y
          CONFIG_PACKAGE_kmod-fuse=y
          EOF

          # USB3.0支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          EOF

          # 常用LuCI插件选择:
          # cat >> .config <<EOF
          # 
          # EOF

          # LuCI主题:
          cat >> .config <<EOF
          #
          # 4. Themes
          #
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          # CONFIG_PACKAGE_luci-theme-material is not set
          CONFIG_PACKAGE_luci-theme-netgear=y
          EOF


          # 常用软件包:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_curl=y
          # CONFIG_PACKAGE_htop=y
          # CONFIG_PACKAGE_nano=y
          # CONFIG_PACKAGE_screen=y
          # CONFIG_PACKAGE_tree=y
          # CONFIG_PACKAGE_vim-fuller=y
          # CONFIG_PACKAGE_wget=y
          # EOF

          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF

          # 
          # ========================固件定制部分结束========================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          cd bin/targets/*/*
          echo "::set-env name=FIRMWARE::$PWD"
          echo "::set-output name=status::success"
          
      - name: UPLOAD_ALL
        id: UPLOAD_ALL
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ALL == 'false' && !cancelled()
        run: |
          cd openwrt
          find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}
          echo "::set-output name=status::success"
      
      - name: Extract Gz Files
        id: extract
        if: steps.compile.outputs.status == 'success' && env.extract == 'true'
        run: |
          cd openwrt/bin/targets/*/*
          gzip -qd *.img.gz  || true
          rm -f *.img.gz
          echo "::set-output name=status::success" 
          
      - name: Rename file
        id: rename
        if: env.rename == 'true' && steps.compile.outputs.status == 'success' 
        run: |
          cd openwrt/bin/targets/*/*
          for i in openwrt*; do mv -f $i `echo $i | sed "s/^openwrt-$TARGET-$SUBTARGET/${NEW_NAME}/"`; done || true
          echo "::set-output name=status::success"
      
#      - name: SSH connection to Actions
#        uses: owlboy-lin/debugger-action@master
#        if: env.SSH_ACTIONS == 'true'      
    
      - name: Gz Files
        id: Gzip_file
        if: steps.compile.outputs.status == 'success' && env.Gzip_file == 'true' 
        run: |
          cd openwrt/bin/targets/$TARGET/$SUBTARGET
          gzip *.img || true
          # rm -f *.img
          echo "::set-output name=status::success"
  
      - name: Generate Sha256sum File For Images
        run: |
          cd openwrt/bin/targets/$TARGET/$SUBTARGET
          mv sha256sums sha256sums.orig
          sha256sum *.* > sha256sums
         
          
      - name: Upload firmware directory
        id: upload_firmware
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.NEW_NAME }}
          path: ${{ env.FIRMWARE }}

      - name: Upload zip
        id: upload_zip
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ALL == 'true' 
        run: |
          cd openwrt
          rm -rf ./release/
          mkdir -p ./release/
          zip -r -j release/${{ env.NEW_NAME }}.zip bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/* || true           
          cd release
          echo "::set-env name=RELEASE::$PWD"
          echo "::set-output name=status::success"   

      - name: Upload zip
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ALL == 'false'
        run: |
          cd openwrt
          rm -rf ./release/
          mkdir -p ./release/
          zip -r release/${{ env.NEW_NAME }}.zip bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/* || true           
          cd release
          echo "::set-env name=RELEASE::$PWD"
          echo "::set-output name=status::success" 
          
      - name: SSH connection to Actions
        uses: owlboy-lin/debugger-action@master
        if: env.SSH_ACTIONS == 'true'      
        
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.all_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          name: 自动发布 ${{ env.NEW_NAME }}
          files: ${{ env.RELEASE }}/*
