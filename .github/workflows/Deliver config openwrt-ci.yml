#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 

name: Deliver config  OpenWrt-CI



on:
  schedule:
    - cron: 0 21 * * *

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'

# permissions:
#   contents: read
        
      
env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE:  .config
  Firmware_Name: OpenWrt-CI
  DIY_P1_SH: OpenWrt-CI-diy/OpenWrt-CI-diy-1.sh
  DIY_P2_SH: OpenWrt-CI-diy/OpenWrt-CI-diy-2.sh
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai 

jobs:


  build_openwrt:

     
    name: Deliver config  OpenWrt-CI
    
    if: github.event.repository.owner.id == github.event.sender.id
    
    runs-on: ubuntu-latest


    steps:
      - name: CPU检测
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 准备完成
        uses: actions/checkout@v4
        
      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

        
      - name: 更新时区、编译时间
        id: date
        run: |
          sudo timedatectl set-timezone "$TZ"
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
          echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
          echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "编译开始时间..."
          START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
          echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
          
          
      - name: 下载源代码
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name: Free up disk space
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
          ln -sf /mnt/openwrt/dl openwrt/dl
          ln -sf /mnt/openwrt/bin openwrt/bin
          ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir

      - name: patch1补丁和自定义设置
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH


      - name: 更新源 #Update feeds
        run: cd openwrt && ./scripts/feeds clean && ./scripts/feeds update -a

      - name: 安装源 #Install feeds
        run: cd openwrt && ./scripts/feeds install -a


      - name: patch2补丁和自定义设置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          
      - name: 下载固件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
    
      - name: Cache
        uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: ${{ matrix.target }}
          clean: ${{ contains(github.event.action, 'nocache') }}
          prefix: ${{ github.workspace }}/openwrt


      - name: Check space usage
        run: |
          shopt -s extglob
          cd openwrt
          if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
              rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
          fi
          df -hT  

      - name: 输出编译信息
        run: |
          cd openwrt
          echo " 系统空间      类型   总数  已用  可用 使用率"
          df -hT $PWD
          
          echo
          echo "=========================================="
          echo
  
          ZZZ="package/lean/default-settings/files/zzz-default-settings"
          echo "DISTRIB_REVISION=$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')" >> $GITHUB_ENV
          echo "KERNEL_PATCHVER=$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
          echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
          echo "	    内核版本：$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"
  
          echo
          echo "=========================================="
  
          grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
          grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
          sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
          sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
          sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1 #排除 luci-app-passwall_Transparent_Proxy
          sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1 #排除 luci-app-qbittorrent-simple_dynamic
          sed -i 's/=y/\ /g' Plug-in
          awk '$0=NR$0' Plug-in > Plug-2
          awk '{print "	" $0}' Plug-2 > Plug-in
  
          echo
          echo
          echo "	      已选插件列表"
          cat Plug-in
          rm -rf {Plug-in,Plug-2}
  
          echo
          echo "=========================================="
  
          echo
          echo
          echo "输出完整插件信息..."
          echo
          echo
          cat .config

      - name: 整理固件文件
        run: |
          cd openwrt
          mkdir -p ./artifact/buildinfo
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          cp -rf ./.config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
          cp -rf ./feeds.conf.default ./artifact/buildinfo/
          cd ./artifact/buildinfo/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
            
      - name: 上传配置文件
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.FILE_DATE }}
          path: openwrt/artifact/buildinfo/
        
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}     


      - name: 生成发布标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d")-Lean-x86_64-编译信息OpenWrt-CI.info" >> $GITHUB_OUTPUT
          echo "release_date=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "
          ★ 源码 : https://github.com/coolsnowwolf/lede
          ★ 分支 : master
          ★ 感谢源码作者无私分享！
          
          输出编译信息 OpenWrt-CI.info" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: 自动发布固件到 Releases
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
        with:
          name: ${{ steps.tag.outputs.release_date }} 编译信息 OpenWrt-CI.info
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: 删除运行记录
        uses: Mattraks/delete-workflow-runs@v2
        continue-on-error: true
        with:
          retain_days: 3     #保留最后多少记录不删除
          keep_minimum_runs: 0

      - name: 删除自动发布的旧固件
        uses: dev-drprasad/delete-older-releases@v0.3.3
        continue-on-error: true
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 20        #保留多少个releases不删除
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
